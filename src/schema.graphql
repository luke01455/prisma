
type Query {
    posts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput ): [Post]!
    myPosts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]!
    users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User]!
    comments(first: Int, skip: Int, after: String, orderBy: CommentOrderByInput): [Comment]!
    post(id: ID!): Post!
    me: User!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!
    login(data: LoginUserInput!): AuthPayload!
    createPost(data: CreatePostInput!): Post!
    deletePost(id: ID!): Post!
    updatePost(id: ID!, data: UpdatePostInput!): Post!
    createComment(data: CreateCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput): Comment!
}

input LoginUserInput {
    email: String!
    password: String!
}

type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload! 
    post: PostSubscriptionPayload!
    myPost: PostSubscriptionPayload!
}

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
    password: String
}

input CreatePostInput {
    title: String!
    body: String!
    published: Boolean!
}

input UpdatePostInput {
    title: String,
    body: String,
    published: Boolean
}

input CreateCommentInput {
    text: String!
    post: ID!
}

input UpdateCommentInput {
    text: String
}

type User {
    id: ID!
    name: String!
    email: String
    password: String!
    posts: [Post]!
    comments: [Comment]!
    updatedAt: String!
    createdAt: String!
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment]!
    updatedAt: String!
    createdAt: String!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
    updatedAt: String!
    createdAt: String!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  password_ASC
  password_DESC
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  published_ASC
  published_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment
}